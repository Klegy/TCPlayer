namespace ManagedBass<# if (!string.IsNullOrEmpty(Namespace)) WriteLine("." + Namespace); #>
{
    <# if (!string.IsNullOrEmpty(DocSummary)) { #>
	/// <summary>
    /// <#= DocSummary #>
    /// </summary> 
    /// <remarks>
    /// <#= DocRemarks #>
    /// </remarks>
	<# } #>
    public static <#= IsPartial ? "partial" : "" #> class <#= LibraryName #>
    {
#if __IOS__
        const string DllName = "__Internal";
#else
        const string DllName = "<#= DllName #>";
#endif

#if __ANDROID__ || WINDOWS || LINUX || __MAC__
        static IntPtr hLib;
        
        /// <summary>
        /// Load this library into Memory.
		/// </summary>
        /// <param name="Folder">Directory to Load from... <see langword="null"/> (default) = Load from Current Directory.</param>
		/// <returns><see langword="true" />, if the library loaded successfully, else <see langword="false" />.</returns>
        /// <remarks>
		/// <para>
		/// An external library is loaded into memory when any of its methods are called for the first time.
		/// This results in the first method call being slower than all subsequent calls.
		/// </para>
		/// <para>
		/// Some BASS libraries and add-ons may introduce new options to the main BASS lib like new parameters.
		/// But, before using these new options the respective library must be already loaded.
		/// This method can be used to make sure, that this library has been loaded.
		/// </para>
		/// </remarks>
        public static bool Load(string Folder = null) => (hLib = DynamicLibrary.Load(DllName, Folder)) != IntPtr.Zero;
		
		/// <summary>
		/// Unloads this library from Memory.
		/// </summary>
		/// <returns><see langword="true" />, if the library unloaded successfully, else <see langword="false" />.</returns>
        public static bool Unload() => DynamicLibrary.Unload(hLib);
#endif

        <# if (!string.IsNullOrEmpty(ID) && IsPlugin) { #>
		/// <summary>
		/// Use this library as a Plugin.
		/// </summary>
		public static readonly Plugin Plugin = new Plugin(DllName);
		<# } #>
		
		<# if (IsPlugin) { #>
        [DllImport(DllName, CharSet = CharSet.Unicode)]
        static extern int BASS_<#= ID #>StreamCreateFile(bool mem, string file, long offset, long length, BassFlags flags<#= EndDef #>);

        [DllImport(DllName)]
        static extern int BASS_<#= ID #>StreamCreateFile(bool mem, IntPtr file, long offset, long length, BassFlags flags<#= EndDef #>);

		<#= FileDoc #>
        public static int CreateStream(string File, long Offset = 0, long Length = 0, BassFlags Flags = BassFlags.Default<#= EndDef #>)
        {
            return BASS_<#= ID #>StreamCreateFile(false, File, Offset, Length, Flags | BassFlags.Unicode<#= EndInvoke #>);
        }

		<#= MemDoc #>
        public static int CreateStream(IntPtr Memory, long Offset, long Length, BassFlags Flags = BassFlags.Default<#= EndDef #>)
        {
            return BASS_<#= ID #>StreamCreateFile(true, new IntPtr(Memory.ToInt64() + Offset), 0, Length, Flags<#= EndInvoke #>);
        }

		<#= ByteDoc #>
        public static int CreateStream(byte[] Memory, long Offset, long Length, BassFlags Flags<#= EndDef #>)
        {
            var GCPin = GCHandle.Alloc(Memory, GCHandleType.Pinned);

            var Handle = CreateStream(GCPin.AddrOfPinnedObject(), Offset, Length, Flags<#= EndInvoke #>);

            if (Handle == 0) GCPin.Free();
            else Bass.ChannelSetSync(Handle, SyncFlags.Free, 0, (a, b, c, d) => GCPin.Free());

            return Handle;
        }
        
        [DllImport(DllName)]
        static extern int BASS_<#= ID #>StreamCreateFileUser(StreamSystem system, BassFlags flags, [In, Out] FileProcedures procs, IntPtr user<#= EndDef #>);

		<#= UserDoc #>
        public static int CreateStream(StreamSystem System, BassFlags Flags, FileProcedures Procedures, IntPtr User = default(IntPtr)<#= EndDef #>)
        {
            var h = BASS_<#= ID #>StreamCreateFileUser(System, Flags, Procedures, User<#= EndInvoke #>);

            if (h != 0)
                Extensions.ChannelReferences.Add(h, 0, Procedures);

            return h;
        }

        [DllImport(DllName, CharSet = CharSet.Unicode)]
        static extern int BASS_<#= ID #>StreamCreateURL(string Url, int Offset, BassFlags Flags, DownloadProcedure Procedure, IntPtr User<#= EndDef #>);

		<#= UrlDoc #>
        public static int CreateStream(string Url, int Offset, BassFlags Flags, DownloadProcedure Procedure, IntPtr User = default(IntPtr)<#= EndDef #>)
        {
            var h = BASS_<#= ID #>StreamCreateURL(Url, Offset, Flags | BassFlags.Unicode, Procedure, User<#= EndInvoke #>);

            if (h != 0)
                Extensions.ChannelReferences.Add(h, 0, Procedure);

            return h;
        }
		<# } #>
    }
}
<# if (HasCondition) Write("#endif"); #>